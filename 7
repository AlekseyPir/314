import tkinter as tk
from tkinter import scrolledtext, messagebox
import timeit
from itertools import combinations

# Список десертов
desserts = ['торт', 'мороженое', 'пирог', 'брауни', 'пудинг', 'кексы', 'пирожные', 'фрукты', 'шоколад', 'печенье']

# Цены на десерты
dessert_prices = {
    'торт': 300,
    'мороженое': 150,
    'пирог': 200,
    'брауни': 180,
    'пудинг': 120,
    'кексы': 80,
    'пирожные': 250,
    'фрукты': 100,
    'шоколад': 220,
    'печенье': 70
}
# Вариант 1: Алгоритмический подход с фильтрацией
def generate_combinations_algorithmic_filtered(desserts_list, r, price_limit):
    results = []
    n = len(desserts_list)
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                combo = (desserts_list[i], desserts_list[j], desserts_list[k])
                total_price = sum(dessert_prices[d] for d in combo)
                if total_price <= price_limit:
                    results.append(combo)
    return results

# Вариант 2: Использование встроенной функции Python с фильтрацией
def generate_combinations_python_filtered(desserts_list, r, price_limit):
    all_combos = list(combinations(desserts_list, r))
    return [
        combo for combo in all_combos
        if sum(dessert_prices[d] for d in combo) <= price_limit
    ]
def create_dessert_selector_gui():
    root = tk.Tk()
    root.title("Выбор десертов по бюджету")
    root.geometry("650x750")

    input_frame = tk.Frame(root, padx=10, pady=10)
    input_frame.pack(fill='x', expand=False)

    price_label = tk.Label(input_frame, text="Введите максимальную общую цену (например, 600):")
    price_label.pack(side='left', padx=(0, 10))

    price_limit_entry = tk.Entry(input_frame, width=15, font=('Arial', 12))
    price_limit_entry.insert(0, "600")
    price_limit_entry.pack(side='left')

    output_frame = tk.Frame(root, padx=10, pady=10)
    output_frame.pack(fill='both', expand=True)

    output_text_area = scrolledtext.ScrolledText(output_frame, wrap=tk.WORD, font=('Courier New', 10), width=70, height=25)
    output_text_area.pack(fill='both', expand=True)

    def calculate_and_display_desserts():
        try:
            limit_str = price_limit_entry.get()
            current_price_limit = int(limit_str)
        except ValueError:
            messagebox.showerror("Ошибка ввода", "Пожалуйста, введите корректное число для лимита цены.")
            return

        output_text_area.delete(1.0, tk.END)
        output_text_area.insert(tk.END, f"Расчет для максимальной общей цены: {current_price_limit}\n\n")

        #Результаты Алгоритмического подхода
        output_text_area.insert(tk.END, "--- Алгоритмический подход ---\n")
        start_time_algorithmic_filtered = timeit.default_timer()
        algorithmic_combinations_filtered = generate_combinations_algorithmic_filtered(desserts, 3, current_price_limit)
        end_time_algorithmic_filtered = timeit.default_timer()

        if not algorithmic_combinations_filtered:
            output_text_area.insert(tk.END, "Комбинаций, удовлетворяющих условиям, не найдено.\n")
        else:
            for combo in algorithmic_combinations_filtered:
                total_price = sum(dessert_prices[d] for d in combo)
                output_text_area.insert(tk.END, f"{combo} - Общая цена: {total_price}\n")
        output_text_area.insert(tk.END, f"Время выполнения: {end_time_algorithmic_filtered - start_time_algorithmic_filtered:.6f} секунд\n\n")

        #Результаты Подхода с использованием функций Python
        output_text_area.insert(tk.END, "--- Подход с использованием itertools.combinations ---\n")
        start_time_python_filtered = timeit.default_timer()
        python_combinations_filtered = generate_combinations_python_filtered(desserts, 3, current_price_limit)
        end_time_python_filtered = timeit.default_timer()

        if not python_combinations_filtered:
            output_text_area.insert(tk.END, "Комбинаций, удовлетворяющих условиям, не найдено.\n")
        else:
            for combo in python_combinations_filtered:
                total_price = sum(dessert_prices[d] for d in combo)
                output_text_area.insert(tk.END, f"{combo} - Общая цена: {total_price}\n")
        output_text_area.insert(tk.END, f"Время выполнения: {end_time_python_filtered - start_time_python_filtered:.6f} секунд\n")

        output_text_area.see(tk.END)

    calculate_button = tk.Button(root, text="Найти комбинации десертов", command=calculate_and_display_desserts, font=('Arial', 14), bg='lightblue', fg='black')
    calculate_button.pack(pady=15)

    root.mainloop()

if __name__ == "__main__":
    create_dessert_selector_gui()
